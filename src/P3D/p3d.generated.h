#pragma once

/*+---------------------------------------------------+
  |    _____        /--------------------------\\     |
  |   /     \\      |                            |    |
  | \\/\\/     |    /  file generated by         |    |
  |  |  (o)(o)    |                  donut tool  |    |
  |  C   .---_)   \\_   _________________________/    |
  |   | |.___|      | /                               |
  |   |  \\__/      <_/                               |
  |   /_____\\                                        |
  |  /_____/ \\                                       |
  | /         \\                                      |
  +---------------------------------------------------+
*/

#include <P3D/P3DChunk.h>
#include <glm/vec2.hpp>
#include <glm/vec3.hpp>
#include <glm/vec4.hpp>
#include <glm/gtc/quaternion.hpp>
#include <glm/mat4x4.hpp>
#include <string>
#include <memory>
#include <vector>
#include <map>

namespace Donut::P3D
{
	class Animation;
	class AnimationGroupList;
	class AnimationGroup;
	class Vector2Channel;
	class Vector3Channel;
	class QuaternionChannel;
	class CompressedQuaternionChannel;
	class Mesh;
	class PolySkin;
	class BoundingBox;
	class BoundingSphere;
	class PrimitiveGroup;
	class Skeleton;
	class SkeletonJoint;
	class StaticEntity;
	class StaticPhysics;
	class InstancedStaticPhysics;
	class DynamicPhysics;
	class AnimDynamicPhysics;
	class AnimObjectWrapper;
	class InstanceList;
	class SceneGraph;
	class SceneGraphRoot;
	class SceneGraphBranch;
	class SceneGraphTransform;
	class SceneGraphDrawable;
	class Shader;
	class ShaderTextureParam;
	class CompositeDrawable;
	class CompositeDrawablePropList;
	class CompositeDrawableProp;
	class Intersect;
	class WorldSphere;
	class BillboardQuad;
	class BillboardQuadGroup;
	class Texture;
	class Image;
	class TextureFont;
	class Sprite;
	class FrontendScreen;
	class FrontendProject;
	class FrontendPage;
	class FrontendLayer;
	class FrontendGroup;
	class Locator2;
	class TriggerVolume;

    class Animation
    {
    public:

        Animation(const P3DChunk&);

        static std::unique_ptr<Animation> Load(const P3DChunk& chunk) { return std::make_unique<Animation>(chunk); }

        const uint32_t& GetVersion() const { return _version; }
        const std::string& GetName() const { return _name; }
        const std::string& GetType() const { return _type; }
        const float& GetNumFrames() const { return _numFrames; }
        const float& GetFrameRate() const { return _frameRate; }
        const uint32_t& GetLooping() const { return _looping; }
        const std::unique_ptr<AnimationGroupList>& GetGroupList() const { return _groupList; }

    private:

        uint32_t _version;
        std::string _name;
        std::string _type;
        float _numFrames;
        float _frameRate;
        uint32_t _looping;
        std::unique_ptr<AnimationGroupList> _groupList;

    };

    class AnimationGroupList
    {
    public:

        AnimationGroupList(const P3DChunk&);

        static std::unique_ptr<AnimationGroupList> Load(const P3DChunk& chunk) { return std::make_unique<AnimationGroupList>(chunk); }

        const uint32_t& GetVersion() const { return _version; }
        const uint32_t& GetNumGroups() const { return _numGroups; }
        const std::vector<std::unique_ptr<AnimationGroup>>& GetGroups() const { return _groups; }

    private:

        uint32_t _version;
        uint32_t _numGroups;
        std::vector<std::unique_ptr<AnimationGroup>> _groups;

    };

    class AnimationGroup
    {
    public:

        AnimationGroup(const P3DChunk&);

        static std::unique_ptr<AnimationGroup> Load(const P3DChunk& chunk) { return std::make_unique<AnimationGroup>(chunk); }

        const uint32_t& GetVersion() const { return _version; }
        const std::string& GetName() const { return _name; }
        const uint32_t& GetGroupId() const { return _groupId; }
        const uint32_t& GetNumChannels() const { return _numChannels; }
        const std::unique_ptr<Vector2Channel>& GetVector2Channel() const { return _vector2Channel; }
        const std::unique_ptr<Vector3Channel>& GetVector3Channel() const { return _vector3Channel; }
        const std::unique_ptr<QuaternionChannel>& GetQuaternionChannel() const { return _quaternionChannel; }
        const std::unique_ptr<CompressedQuaternionChannel>& GetCompressedQuaternionChannel() const { return _compressedQuaternionChannel; }

    private:

        uint32_t _version;
        std::string _name;
        uint32_t _groupId;
        uint32_t _numChannels;
        std::unique_ptr<Vector2Channel> _vector2Channel;
        std::unique_ptr<Vector3Channel> _vector3Channel;
        std::unique_ptr<QuaternionChannel> _quaternionChannel;
        std::unique_ptr<CompressedQuaternionChannel> _compressedQuaternionChannel;

    };

    class Vector2Channel
    {
    public:

        Vector2Channel(const P3DChunk&);

        static std::unique_ptr<Vector2Channel> Load(const P3DChunk& chunk) { return std::make_unique<Vector2Channel>(chunk); }

        const uint32_t& GetVersion() const { return _version; }
        const std::string& GetParam() const { return _param; }
        const uint16_t& GetMapping() const { return _mapping; }
        const glm::vec3& GetConstants() const { return _constants; }
        const uint32_t& GetNumFrames() const { return _numFrames; }
        const std::vector<uint16_t>& GetFrames() const { return _frames; }
        const std::vector<glm::vec2>& GetValues() const { return _values; }

    private:

        uint32_t _version;
        std::string _param;
        uint16_t _mapping;
        glm::vec3 _constants;
        uint32_t _numFrames;
        std::vector<uint16_t> _frames;
        std::vector<glm::vec2> _values;

    };

    class Vector3Channel
    {
    public:

        Vector3Channel(const P3DChunk&);

        static std::unique_ptr<Vector3Channel> Load(const P3DChunk& chunk) { return std::make_unique<Vector3Channel>(chunk); }

        const uint32_t& GetVersion() const { return _version; }
        const std::string& GetParam() const { return _param; }
        const uint32_t& GetNumFrames() const { return _numFrames; }
        const std::vector<uint16_t>& GetFrames() const { return _frames; }
        const std::vector<glm::vec3>& GetValues() const { return _values; }

    private:

        uint32_t _version;
        std::string _param;
        uint32_t _numFrames;
        std::vector<uint16_t> _frames;
        std::vector<glm::vec3> _values;

    };

    class QuaternionChannel
    {
    public:

        QuaternionChannel(const P3DChunk&);

        static std::unique_ptr<QuaternionChannel> Load(const P3DChunk& chunk) { return std::make_unique<QuaternionChannel>(chunk); }

        const uint32_t& GetVersion() const { return _version; }
        const std::string& GetParam() const { return _param; }
        const uint32_t& GetNumFrames() const { return _numFrames; }
        const std::vector<uint16_t>& GetFrames() const { return _frames; }
        const std::vector<glm::quat>& GetValues() const { return _values; }

    private:

        uint32_t _version;
        std::string _param;
        uint32_t _numFrames;
        std::vector<uint16_t> _frames;
        std::vector<glm::quat> _values;

    };

    class CompressedQuaternionChannel
    {
    public:

        CompressedQuaternionChannel(const P3DChunk&);

        static std::unique_ptr<CompressedQuaternionChannel> Load(const P3DChunk& chunk) { return std::make_unique<CompressedQuaternionChannel>(chunk); }

        const uint32_t& GetVersion() const { return _version; }
        const std::string& GetParam() const { return _param; }
        const uint32_t& GetNumFrames() const { return _numFrames; }
        const std::vector<uint16_t>& GetFrames() const { return _frames; }
        const std::vector<uint64_t>& GetValues() const { return _values; }

    private:

        uint32_t _version;
        std::string _param;
        uint32_t _numFrames;
        std::vector<uint16_t> _frames;
        std::vector<uint64_t> _values;

    };

    class Mesh
    {
    public:

        Mesh(const P3DChunk&);

        static std::unique_ptr<Mesh> Load(const P3DChunk& chunk) { return std::make_unique<Mesh>(chunk); }

        const std::string& GetName() const { return _name; }
        const uint32_t& GetVersion() const { return _version; }
        const uint32_t& GetNumPrimGroups() const { return _numPrimGroups; }
        const std::vector<std::unique_ptr<PrimitiveGroup>>& GetPrimitiveGroups() const { return _primitiveGroups; }

    private:

        std::string _name;
        uint32_t _version;
        uint32_t _numPrimGroups;
        std::vector<std::unique_ptr<PrimitiveGroup>> _primitiveGroups;

    };

    class PolySkin
    {
    public:

        PolySkin(const P3DChunk&);

        static std::unique_ptr<PolySkin> Load(const P3DChunk& chunk) { return std::make_unique<PolySkin>(chunk); }

        const std::string& GetName() const { return _name; }
        const uint32_t& GetVersion() const { return _version; }
        const std::string& GetSkeletonName() const { return _skeletonName; }
        const uint32_t& GetNumPrimGroups() const { return _numPrimGroups; }
        const std::vector<std::unique_ptr<PrimitiveGroup>>& GetPrimitiveGroups() const { return _primitiveGroups; }
        const std::unique_ptr<BoundingBox>& GetBoundingBox() const { return _boundingBox; }
        const std::unique_ptr<BoundingSphere>& GetBoundingSphere() const { return _boundingSphere; }

    private:

        std::string _name;
        uint32_t _version;
        std::string _skeletonName;
        uint32_t _numPrimGroups;
        std::vector<std::unique_ptr<PrimitiveGroup>> _primitiveGroups;
        std::unique_ptr<BoundingBox> _boundingBox;
        std::unique_ptr<BoundingSphere> _boundingSphere;

    };

    class BoundingBox
    {
    public:

        BoundingBox(const P3DChunk&);

        static std::unique_ptr<BoundingBox> Load(const P3DChunk& chunk) { return std::make_unique<BoundingBox>(chunk); }

        const glm::vec3& GetMin() const { return _min; }
        const glm::vec3& GetMax() const { return _max; }

    private:

        glm::vec3 _min;
        glm::vec3 _max;

    };

    class BoundingSphere
    {
    public:

        BoundingSphere(const P3DChunk&);

        static std::unique_ptr<BoundingSphere> Load(const P3DChunk& chunk) { return std::make_unique<BoundingSphere>(chunk); }

        const glm::vec3& GetCentre() const { return _centre; }
        const float& GetRadius() const { return _radius; }

    private:

        glm::vec3 _centre;
        float _radius;

    };

    class PrimitiveGroup
    {
    public:

        PrimitiveGroup(const P3DChunk&);

        static std::unique_ptr<PrimitiveGroup> Load(const P3DChunk& chunk) { return std::make_unique<PrimitiveGroup>(chunk); }

        const uint32_t& GetVersion() const { return _version; }
        const std::string& GetShaderName() const { return _shaderName; }
        const uint32_t& GetPrimType() const { return _primType; }
        const uint32_t& GetHasDataFlags() const { return _hasDataFlags; }
        const uint32_t& GetNumVerts() const { return _numVerts; }
        const uint32_t& GetNumIndices() const { return _numIndices; }
        const uint32_t& GetNumMatrices() const { return _numMatrices; }
        const std::vector<glm::vec3>& GetVertices() const { return _vertices; }
        const std::vector<uint32_t>& GetIndices() const { return _indices; }
        const std::vector<glm::vec3>& GetNormals() const { return _normals; }
        const std::vector<glm::vec2>& GetUvs(size_t index) const { return _uvs.at(index); }
        const std::vector<uint32_t>& GetMatrixList() const { return _matrixList; }
        const std::vector<glm::vec3>& GetWeightList() const { return _weightList; }
        const std::vector<uint32_t>& GetMatrixPalette() const { return _matrixPalette; }
        const std::vector<uint32_t>& GetColors() const { return _colors; }

    private:

        uint32_t _version;
        std::string _shaderName;
        uint32_t _primType;
        uint32_t _hasDataFlags;
        uint32_t _numVerts;
        uint32_t _numIndices;
        uint32_t _numMatrices;
        std::vector<glm::vec3> _vertices;
        std::vector<uint32_t> _indices;
        std::vector<glm::vec3> _normals;
        std::vector<std::vector<glm::vec2>> _uvs;
        std::vector<uint32_t> _matrixList;
        std::vector<glm::vec3> _weightList;
        std::vector<uint32_t> _matrixPalette;
        std::vector<uint32_t> _colors;

    };

    class Skeleton
    {
    public:

        Skeleton(const P3DChunk&);

        static std::unique_ptr<Skeleton> Load(const P3DChunk& chunk) { return std::make_unique<Skeleton>(chunk); }

        const std::string& GetName() const { return _name; }
        const uint32_t& GetVersion() const { return _version; }
        const uint32_t& GetNumJoints() const { return _numJoints; }
        const std::vector<std::unique_ptr<SkeletonJoint>>& GetJoints() const { return _joints; }

    private:

        std::string _name;
        uint32_t _version;
        uint32_t _numJoints;
        std::vector<std::unique_ptr<SkeletonJoint>> _joints;

    };

    class SkeletonJoint
    {
    public:

        SkeletonJoint(const P3DChunk&);

        static std::unique_ptr<SkeletonJoint> Load(const P3DChunk& chunk) { return std::make_unique<SkeletonJoint>(chunk); }

        const std::string& GetName() const { return _name; }
        const uint32_t& GetParent() const { return _parent; }
        const int32_t& GetDof() const { return _dof; }
        const int32_t& GetFreeAxis() const { return _freeAxis; }
        const int32_t& GetPrimaryAxis() const { return _primaryAxis; }
        const int32_t& GetSecondaryAxis() const { return _secondaryAxis; }
        const int32_t& GetTwistAxis() const { return _twistAxis; }
        const glm::mat4& GetRestPose() const { return _restPose; }

    private:

        std::string _name;
        uint32_t _parent;
        int32_t _dof;
        int32_t _freeAxis;
        int32_t _primaryAxis;
        int32_t _secondaryAxis;
        int32_t _twistAxis;
        glm::mat4 _restPose;

    };

    class StaticEntity
    {
    public:

        StaticEntity(const P3DChunk&);

        static std::unique_ptr<StaticEntity> Load(const P3DChunk& chunk) { return std::make_unique<StaticEntity>(chunk); }

        const std::string& GetName() const { return _name; }
        const uint32_t& GetVersion() const { return _version; }
        const uint32_t& GetRenderOrder() const { return _renderOrder; }
        const std::unique_ptr<Mesh>& GetMesh() const { return _mesh; }

    private:

        std::string _name;
        uint32_t _version;
        uint32_t _renderOrder;
        std::unique_ptr<Mesh> _mesh;

    };

    class StaticPhysics
    {
    public:

        StaticPhysics(const P3DChunk&);

        static std::unique_ptr<StaticPhysics> Load(const P3DChunk& chunk) { return std::make_unique<StaticPhysics>(chunk); }

        const std::string& GetName() const { return _name; }

    private:

        std::string _name;

    };

    class InstancedStaticPhysics
    {
    public:

        InstancedStaticPhysics(const P3DChunk&);

        static std::unique_ptr<InstancedStaticPhysics> Load(const P3DChunk& chunk) { return std::make_unique<InstancedStaticPhysics>(chunk); }

        const std::string& GetName() const { return _name; }
        const std::vector<std::unique_ptr<Mesh>>& GetMeshes() const { return _meshes; }
        const std::unique_ptr<InstanceList>& GetInstanceList() const { return _instanceList; }

    private:

        std::string _name;
        std::vector<std::unique_ptr<Mesh>> _meshes;
        std::unique_ptr<InstanceList> _instanceList;

    };

    class DynamicPhysics
    {
    public:

        DynamicPhysics(const P3DChunk&);

        static std::unique_ptr<DynamicPhysics> Load(const P3DChunk& chunk) { return std::make_unique<DynamicPhysics>(chunk); }

        const std::string& GetName() const { return _name; }
        const std::vector<std::unique_ptr<Mesh>>& GetMeshes() const { return _meshes; }
        const std::unique_ptr<InstanceList>& GetInstanceList() const { return _instanceList; }

    private:

        std::string _name;
        std::vector<std::unique_ptr<Mesh>> _meshes;
        std::unique_ptr<InstanceList> _instanceList;

    };

    class AnimDynamicPhysics
    {
    public:

        AnimDynamicPhysics(const P3DChunk&);

        static std::unique_ptr<AnimDynamicPhysics> Load(const P3DChunk& chunk) { return std::make_unique<AnimDynamicPhysics>(chunk); }

        const std::string& GetName() const { return _name; }
        const std::unique_ptr<AnimObjectWrapper>& GetAnimObjectWrapper() const { return _animObjectWrapper; }
        const std::unique_ptr<InstanceList>& GetInstanceList() const { return _instanceList; }

    private:

        std::string _name;
        std::unique_ptr<AnimObjectWrapper> _animObjectWrapper;
        std::unique_ptr<InstanceList> _instanceList;

    };

    class AnimObjectWrapper
    {
    public:

        AnimObjectWrapper(const P3DChunk&);

        static std::unique_ptr<AnimObjectWrapper> Load(const P3DChunk& chunk) { return std::make_unique<AnimObjectWrapper>(chunk); }

        const std::string& GetName() const { return _name; }
        const std::vector<std::unique_ptr<CompositeDrawable>>& GetCompositeDrawables() const { return _compositeDrawables; }
        const std::vector<std::unique_ptr<Skeleton>>& GetSkeletons() const { return _skeletons; }
        const std::vector<std::unique_ptr<Mesh>>& GetMeshes() const { return _meshes; }

    private:

        std::string _name;
        std::vector<std::unique_ptr<CompositeDrawable>> _compositeDrawables;
        std::vector<std::unique_ptr<Skeleton>> _skeletons;
        std::vector<std::unique_ptr<Mesh>> _meshes;

    };

    class InstanceList
    {
    public:

        InstanceList(const P3DChunk&);

        static std::unique_ptr<InstanceList> Load(const P3DChunk& chunk) { return std::make_unique<InstanceList>(chunk); }

        const std::string& GetName() const { return _name; }
        const std::unique_ptr<SceneGraph>& GetSceneGraph() const { return _sceneGraph; }

    private:

        std::string _name;
        std::unique_ptr<SceneGraph> _sceneGraph;

    };

    class SceneGraph
    {
    public:

        SceneGraph(const P3DChunk&);

        static std::unique_ptr<SceneGraph> Load(const P3DChunk& chunk) { return std::make_unique<SceneGraph>(chunk); }

        const std::string& GetName() const { return _name; }
        const std::unique_ptr<SceneGraphRoot>& GetRoot() const { return _root; }

    private:

        std::string _name;
        std::unique_ptr<SceneGraphRoot> _root;

    };

    class SceneGraphRoot
    {
    public:

        SceneGraphRoot(const P3DChunk&);

        static std::unique_ptr<SceneGraphRoot> Load(const P3DChunk& chunk) { return std::make_unique<SceneGraphRoot>(chunk); }

        const std::unique_ptr<SceneGraphBranch>& GetBranch() const { return _branch; }

    private:

        std::unique_ptr<SceneGraphBranch> _branch;

    };

    class SceneGraphBranch
    {
    public:

        SceneGraphBranch(const P3DChunk&);

        static std::unique_ptr<SceneGraphBranch> Load(const P3DChunk& chunk) { return std::make_unique<SceneGraphBranch>(chunk); }

        const std::string& GetName() const { return _name; }
        const std::vector<std::unique_ptr<SceneGraphTransform>>& GetChildren() const { return _children; }

    private:

        std::string _name;
        std::vector<std::unique_ptr<SceneGraphTransform>> _children;

    };

    class SceneGraphTransform
    {
    public:

        SceneGraphTransform(const P3DChunk&);

        static std::unique_ptr<SceneGraphTransform> Load(const P3DChunk& chunk) { return std::make_unique<SceneGraphTransform>(chunk); }

        const std::string& GetName() const { return _name; }
        const uint32_t& GetNumChildren() const { return _numChildren; }
        const glm::mat4& GetTransform() const { return _transform; }
        const std::vector<std::unique_ptr<SceneGraphTransform>>& GetChildren() const { return _children; }
        const std::vector<std::unique_ptr<SceneGraphDrawable>>& GetDrawables() const { return _drawables; }

    private:

        std::string _name;
        uint32_t _numChildren;
        glm::mat4 _transform;
        std::vector<std::unique_ptr<SceneGraphTransform>> _children;
        std::vector<std::unique_ptr<SceneGraphDrawable>> _drawables;

    };

    class SceneGraphDrawable
    {
    public:

        SceneGraphDrawable(const P3DChunk&);

        static std::unique_ptr<SceneGraphDrawable> Load(const P3DChunk& chunk) { return std::make_unique<SceneGraphDrawable>(chunk); }

        const std::string& GetName() const { return _name; }
        const float& GetSortOrder() const { return _sortOrder; }

    private:

        std::string _name;
        float _sortOrder;

    };

    class Shader
    {
    public:

        Shader(const P3DChunk&);

        static std::unique_ptr<Shader> Load(const P3DChunk& chunk) { return std::make_unique<Shader>(chunk); }

        const std::string& GetName() const { return _name; }
        const uint32_t& GetVersion() const { return _version; }
        const std::string& GetPddiShaderName() const { return _pddiShaderName; }
        const uint32_t& GetIsTrans() const { return _isTrans; }
        const uint32_t& GetVertexNeeds() const { return _vertexNeeds; }
        const uint32_t& GetVertexMask() const { return _vertexMask; }
        const uint32_t& GetNumParams() const { return _numParams; }
        const std::vector<std::unique_ptr<ShaderTextureParam>>& GetTextureParams() const { return _textureParams; }

    private:

        std::string _name;
        uint32_t _version;
        std::string _pddiShaderName;
        uint32_t _isTrans;
        uint32_t _vertexNeeds;
        uint32_t _vertexMask;
        uint32_t _numParams;
        std::vector<std::unique_ptr<ShaderTextureParam>> _textureParams;

    };

    class ShaderTextureParam
    {
    public:

        ShaderTextureParam(const P3DChunk&);

        static std::unique_ptr<ShaderTextureParam> Load(const P3DChunk& chunk) { return std::make_unique<ShaderTextureParam>(chunk); }

        const std::string& GetKey() const { return _key; }
        const std::string& GetValue() const { return _value; }

    private:

        std::string _key;
        std::string _value;

    };

    class CompositeDrawable
    {
    public:

        CompositeDrawable(const P3DChunk&);

        static std::unique_ptr<CompositeDrawable> Load(const P3DChunk& chunk) { return std::make_unique<CompositeDrawable>(chunk); }

        const std::string& GetName() const { return _name; }
        const std::string& GetSkeletonName() const { return _skeletonName; }
        const std::unique_ptr<CompositeDrawablePropList>& GetPropList() const { return _propList; }

    private:

        std::string _name;
        std::string _skeletonName;
        std::unique_ptr<CompositeDrawablePropList> _propList;

    };

    class CompositeDrawablePropList
    {
    public:

        CompositeDrawablePropList(const P3DChunk&);

        static std::unique_ptr<CompositeDrawablePropList> Load(const P3DChunk& chunk) { return std::make_unique<CompositeDrawablePropList>(chunk); }

        const uint32_t& GetNumElements() const { return _numElements; }
        const std::vector<std::unique_ptr<CompositeDrawableProp>>& GetProps() const { return _props; }

    private:

        uint32_t _numElements;
        std::vector<std::unique_ptr<CompositeDrawableProp>> _props;

    };

    class CompositeDrawableProp
    {
    public:

        CompositeDrawableProp(const P3DChunk&);

        static std::unique_ptr<CompositeDrawableProp> Load(const P3DChunk& chunk) { return std::make_unique<CompositeDrawableProp>(chunk); }

        const std::string& GetName() const { return _name; }
        const uint32_t& GetIsTrans() const { return _isTrans; }
        const uint32_t& GetSkeletonJoint() const { return _skeletonJoint; }

    private:

        std::string _name;
        uint32_t _isTrans;
        uint32_t _skeletonJoint;

    };

    class Intersect
    {
    public:

        Intersect(const P3DChunk&);

        static std::unique_ptr<Intersect> Load(const P3DChunk& chunk) { return std::make_unique<Intersect>(chunk); }

        const std::vector<uint32_t>& GetIndices() const { return _indices; }
        const std::vector<glm::vec3>& GetPositions() const { return _positions; }
        const std::vector<glm::vec3>& GetNormals() const { return _normals; }
        const std::unique_ptr<BoundingBox>& GetBounds() const { return _bounds; }

    private:

        std::vector<uint32_t> _indices;
        std::vector<glm::vec3> _positions;
        std::vector<glm::vec3> _normals;
        std::unique_ptr<BoundingBox> _bounds;

    };

    class WorldSphere
    {
    public:

        WorldSphere(const P3DChunk&);

        static std::unique_ptr<WorldSphere> Load(const P3DChunk& chunk) { return std::make_unique<WorldSphere>(chunk); }

        const std::string& GetName() const { return _name; }
        const uint32_t& GetVersion() const { return _version; }
        const uint32_t& GetMeshCount() const { return _meshCount; }
        const uint32_t& GetBillboardCount() const { return _billboardCount; }
        const std::vector<std::unique_ptr<Mesh>>& GetMeshes() const { return _meshes; }

    private:

        std::string _name;
        uint32_t _version;
        uint32_t _meshCount;
        uint32_t _billboardCount;
        std::vector<std::unique_ptr<Mesh>> _meshes;

    };

    class BillboardQuad
    {
    public:

        BillboardQuad(const P3DChunk&);

        static std::unique_ptr<BillboardQuad> Load(const P3DChunk& chunk) { return std::make_unique<BillboardQuad>(chunk); }

        const uint32_t& GetVersion() const { return _version; }
        const std::string& GetName() const { return _name; }
        const std::string& GetMode() const { return _mode; }
        const glm::vec3& GetTranslation() const { return _translation; }
        const uint32_t& GetColor() const { return _color; }
        const glm::vec2& GetUv0() const { return _uv0; }
        const glm::vec2& GetUv1() const { return _uv1; }
        const glm::vec2& GetUv2() const { return _uv2; }
        const glm::vec2& GetUv3() const { return _uv3; }
        const float& GetWidth() const { return _width; }
        const float& GetHeight() const { return _height; }
        const float& GetDistance() const { return _distance; }
        const glm::vec2& GetUvOffset() const { return _uvOffset; }

    private:

        uint32_t _version;
        std::string _name;
        std::string _mode;
        glm::vec3 _translation;
        uint32_t _color;
        glm::vec2 _uv0;
        glm::vec2 _uv1;
        glm::vec2 _uv2;
        glm::vec2 _uv3;
        float _width;
        float _height;
        float _distance;
        glm::vec2 _uvOffset;

    };

    class BillboardQuadGroup
    {
    public:

        BillboardQuadGroup(const P3DChunk&);

        static std::unique_ptr<BillboardQuadGroup> Load(const P3DChunk& chunk) { return std::make_unique<BillboardQuadGroup>(chunk); }

        const uint32_t& GetVersion() const { return _version; }
        const std::string& GetName() const { return _name; }
        const std::string& GetShader() const { return _shader; }
        const uint32_t& GetZTest() const { return _zTest; }
        const uint32_t& GetZWrite() const { return _zWrite; }
        const uint32_t& GetFog() const { return _fog; }
        const uint32_t& GetQuadCount() const { return _quadCount; }
        const std::vector<std::unique_ptr<BillboardQuad>>& GetQuads() const { return _quads; }

    private:

        uint32_t _version;
        std::string _name;
        std::string _shader;
        uint32_t _zTest;
        uint32_t _zWrite;
        uint32_t _fog;
        uint32_t _quadCount;
        std::vector<std::unique_ptr<BillboardQuad>> _quads;

    };

    class Texture
    {
    public:

        Texture(const P3DChunk&);

        static std::unique_ptr<Texture> Load(const P3DChunk& chunk) { return std::make_unique<Texture>(chunk); }

        const std::string& GetName() const { return _name; }
        const uint32_t& GetVersion() const { return _version; }
        const uint32_t& GetWidth() const { return _width; }
        const uint32_t& GetHeight() const { return _height; }
        const uint32_t& GetBpp() const { return _bpp; }
        const uint32_t& GetAlphaDepth() const { return _alphaDepth; }
        const uint32_t& GetNumMipMaps() const { return _numMipMaps; }
        const uint32_t& GetTextureType() const { return _textureType; }
        const uint32_t& GetUsage() const { return _usage; }
        const uint32_t& GetPriority() const { return _priority; }
        const std::unique_ptr<Image>& GetImage() const { return _image; }

    private:

        std::string _name;
        uint32_t _version;
        uint32_t _width;
        uint32_t _height;
        uint32_t _bpp;
        uint32_t _alphaDepth;
        uint32_t _numMipMaps;
        uint32_t _textureType;
        uint32_t _usage;
        uint32_t _priority;
        std::unique_ptr<Image> _image;

    };

    class Image
    {
    public:

        Image(const P3DChunk&);

        static std::unique_ptr<Image> Load(const P3DChunk& chunk) { return std::make_unique<Image>(chunk); }

        const std::string& GetName() const { return _name; }
        const uint32_t& GetVersion() const { return _version; }
        const uint32_t& GetWidth() const { return _width; }
        const uint32_t& GetHeight() const { return _height; }
        const uint32_t& GetBpp() const { return _bpp; }
        const uint32_t& GetPalettized() const { return _palettized; }
        const uint32_t& GetHasAlpha() const { return _hasAlpha; }
        const uint32_t& GetFormat() const { return _format; }
        const std::vector<uint8_t>& GetData() const { return _data; }

    private:

        std::string _name;
        uint32_t _version;
        uint32_t _width;
        uint32_t _height;
        uint32_t _bpp;
        uint32_t _palettized;
        uint32_t _hasAlpha;
        uint32_t _format;
        std::vector<uint8_t> _data;

    };

    class TextureFont
    {
    public:

        TextureFont(const P3DChunk&);

        static std::unique_ptr<TextureFont> Load(const P3DChunk& chunk) { return std::make_unique<TextureFont>(chunk); }

        const uint32_t& GetVersion() const { return _version; }
        const std::string& GetName() const { return _name; }
        const std::string& GetShader() const { return _shader; }
        const float& GetSize() const { return _size; }
        const float& GetWidth() const { return _width; }
        const float& GetHeight() const { return _height; }
        const float& GetBaseLine() const { return _baseLine; }
        const uint32_t& GetNumTextures() const { return _numTextures; }
        const std::vector<std::unique_ptr<Texture>>& GetTextures() const { return _textures; }
        const std::vector<FontGlyph>& GetGlyphs() const { return _glyphs; }

    private:

        uint32_t _version;
        std::string _name;
        std::string _shader;
        float _size;
        float _width;
        float _height;
        float _baseLine;
        uint32_t _numTextures;
        std::vector<std::unique_ptr<Texture>> _textures;
        std::vector<FontGlyph> _glyphs;

    };

    class Sprite
    {
    public:

        Sprite(const P3DChunk&);

        static std::unique_ptr<Sprite> Load(const P3DChunk& chunk) { return std::make_unique<Sprite>(chunk); }

        const uint32_t& GetImageCount() const { return _imageCount; }
        const std::string& GetName() const { return _name; }
        const std::string& GetShader() const { return _shader; }
        const uint32_t& GetNativeWidth() const { return _nativeWidth; }
        const uint32_t& GetNativeHeight() const { return _nativeHeight; }
        const uint32_t& GetWidth() const { return _width; }
        const uint32_t& GetHeight() const { return _height; }
        const uint32_t& GetBlitBorder() const { return _blitBorder; }
        const std::vector<std::unique_ptr<Image>>& GetImages() const { return _images; }

    private:

        uint32_t _imageCount;
        std::string _name;
        std::string _shader;
        uint32_t _nativeWidth;
        uint32_t _nativeHeight;
        uint32_t _width;
        uint32_t _height;
        uint32_t _blitBorder;
        std::vector<std::unique_ptr<Image>> _images;

    };

    class FrontendScreen
    {
    public:

        FrontendScreen(const P3DChunk&);

        static std::unique_ptr<FrontendScreen> Load(const P3DChunk& chunk) { return std::make_unique<FrontendScreen>(chunk); }

        const std::string& GetName() const { return _name; }
        const uint32_t& GetVersion() const { return _version; }
        const uint32_t& GetNumPages() const { return _numPages; }
        const std::vector<std::string>& GetPageNames() const { return _pageNames; }

    private:

        std::string _name;
        uint32_t _version;
        uint32_t _numPages;
        std::vector<std::string> _pageNames;

    };

    class FrontendProject
    {
    public:

        FrontendProject(const P3DChunk&);

        static std::unique_ptr<FrontendProject> Load(const P3DChunk& chunk) { return std::make_unique<FrontendProject>(chunk); }

        const std::string& GetName() const { return _name; }
        const uint32_t& GetVersion() const { return _version; }
        const uint32_t& GetResX() const { return _resX; }
        const uint32_t& GetResY() const { return _resY; }
        const std::string& GetPlatform() const { return _platform; }
        const std::string& GetPagePath() const { return _pagePath; }
        const std::string& GetResourcePath() const { return _resourcePath; }
        const std::string& GetScreenPath() const { return _screenPath; }
        const std::vector<std::unique_ptr<FrontendPage>>& GetPages() const { return _pages; }

    private:

        std::string _name;
        uint32_t _version;
        uint32_t _resX;
        uint32_t _resY;
        std::string _platform;
        std::string _pagePath;
        std::string _resourcePath;
        std::string _screenPath;
        std::vector<std::unique_ptr<FrontendPage>> _pages;

    };

    class FrontendPage
    {
    public:

        FrontendPage(const P3DChunk&);

        static std::unique_ptr<FrontendPage> Load(const P3DChunk& chunk) { return std::make_unique<FrontendPage>(chunk); }

        const std::string& GetName() const { return _name; }
        const uint32_t& GetVersion() const { return _version; }
        const uint32_t& GetResX() const { return _resX; }
        const uint32_t& GetResY() const { return _resY; }
        const std::vector<std::unique_ptr<FrontendLayer>>& GetLayers() const { return _layers; }

    private:

        std::string _name;
        uint32_t _version;
        uint32_t _resX;
        uint32_t _resY;
        std::vector<std::unique_ptr<FrontendLayer>> _layers;

    };

    class FrontendLayer
    {
    public:

        FrontendLayer(const P3DChunk&);

        static std::unique_ptr<FrontendLayer> Load(const P3DChunk& chunk) { return std::make_unique<FrontendLayer>(chunk); }

        const std::string& GetName() const { return _name; }
        const uint32_t& GetVersion() const { return _version; }
        const uint32_t& GetVisible() const { return _visible; }
        const uint32_t& GetEditable() const { return _editable; }
        const uint32_t& GetAlpha() const { return _alpha; }

    private:

        std::string _name;
        uint32_t _version;
        uint32_t _visible;
        uint32_t _editable;
        uint32_t _alpha;

    };

    class FrontendGroup
    {
    public:

        FrontendGroup(const P3DChunk&);

        static std::unique_ptr<FrontendGroup> Load(const P3DChunk& chunk) { return std::make_unique<FrontendGroup>(chunk); }

        const std::string& GetName() const { return _name; }
        const uint32_t& GetVersion() const { return _version; }
        const uint32_t& GetAlpha() const { return _alpha; }
        const std::vector<std::unique_ptr<FrontendGroup>>& GetChildren() const { return _children; }

    private:

        std::string _name;
        uint32_t _version;
        uint32_t _alpha;
        std::vector<std::unique_ptr<FrontendGroup>> _children;

    };

    class Locator2
    {
    public:

        Locator2(const P3DChunk&);

        static std::unique_ptr<Locator2> Load(const P3DChunk& chunk) { return std::make_unique<Locator2>(chunk); }

        const std::string& GetName() const { return _name; }
        const uint32_t& GetType() const { return _type; }
        const uint32_t& GetDataSize() const { return _dataSize; }
        const std::vector<std::unique_ptr<TriggerVolume>>& GetTriggers() const { return _triggers; }

    private:

        std::string _name;
        uint32_t _type;
        uint32_t _dataSize;
        std::vector<std::unique_ptr<TriggerVolume>> _triggers;

    };

    class TriggerVolume
    {
    public:

        TriggerVolume(const P3DChunk&);

        static std::unique_ptr<TriggerVolume> Load(const P3DChunk& chunk) { return std::make_unique<TriggerVolume>(chunk); }

        const std::string& GetName() const { return _name; }

    private:

        std::string _name;

    };
}
